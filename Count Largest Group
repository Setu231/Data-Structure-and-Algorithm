class Solution {
    public int countLargestGroup(int n) {
        int count = 0, result = 0;
        Map<Integer,Integer> map = new HashMap<Integer,Integer>();
          for(int i = 1; i < n+1 ; i++) {
            if (i < 10) {
              map.put(i,map.getOrDefault(i,0) + 1);  
              }else{
                map.put(keyRes(i), map.getOrDefault(keyRes(i),0) + 1);
            }
         }
        for(int i : map.keySet()) {
            if (map.get(i) > count) {
                count = map.get(i);
                result = 1;
            }else if (map.get(i) == count){
                result++;
            }
        }
        return result;
    }
    int keyRes(int i) {
        int key = 0;
        while(i > 0) {
            key += i%10;
            i = i/10;
        }
        return key;
    }
}

// class Solution {
//     public int countLargestGroup(int n) {
//         int [] res = new int [37];
//         int count = 0, result = 0;
//           for(int i = 1; i < n+1 ; i++) {
//             if (i < 10) {
//               res[i]++;  
//               }else{
//                 res[keyRes(i)]++;
//             }
//          }
//         for(int i = 0; i < 37; i++) {
//             if (res[i] > count) {
//                 count = res[i];
//                 result = 1;
//             }else if (res[i] == count){
//                 result++;
//             }
//         }
//         return result;
//     }
//     int keyRes(int i) {
//         int key = 0;
//         while(i > 0) {
//             key += i%10;
//             i = i/10;
//         }
//         return key;
//     }
// }