class Solution {
    public int[] twoSum(int[] numbers, int target) {
        Map<Integer,Integer> map = new HashMap<Integer,Integer>();
        for (int i = 0; i < numbers.length; i++) {
            if(map.containsKey(target - numbers[i])) {
                return new int [] {map.get(target - numbers[i])+1, i+1};
            }
                map.put(numbers[i],i);
        }
        return new int [] {0,0};
    }
}

 
//All cases passed but time exceeded

// int i = 0, j = i+1;
//         if (numbers.length == 2 && numbers[i] + numbers[j] == target) {
//               return new int [] {i+1, j+1}; 
//            }
//        while(i < numbers.length) {
//            if (j == numbers.length -1 && numbers[i] + numbers[j] == target || numbers[i] + numbers[j] == target) {
//                return new int [] {i+1, j+1};
//            }
//            else if (j == numbers.length - 1) {
//                i++;
//                j = i;
//            }
//            j++;
//           }
//         return new int [] {0,0};