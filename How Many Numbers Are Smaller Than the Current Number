class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int [] clone = new int[101];
        int [] res = new int[nums.length];
        for (int i : nums) {
            clone[i]++;
        }
        int p = 0;
        for (int i = 0; i < 101; i++) {
            p += clone[i];
            clone[i] = p;
        }
       for(int i = 0; i < nums.length; i++) {
          if(nums[i] == 0){
                res[i] = 0;
            }else{
                res[i] = clone[nums[i] - 1];
            }
       }
        return res;
    }
}

// Map<Integer, Integer> map = new HashMap<Integer, Integer>();
//         int [] clone = nums.clone();
//         Arrays.sort(nums);
//         for(int i = 0; i < nums.length; i++) {
//             if (!map.containsKey(nums[i])) {
//                 map.put(nums[i],i);
//             }
//         }
//         for(int i = 0; i < clone.length; i++) {
//             if (map.containsKey(clone[i])) {
//                 clone[i] = map.get(clone[i]);
//             }
//         }
//         return clone;

      
       // int [] result = new int[nums.length];
       // for (int i = 0; i < nums.length; i++){
       // int count = 0;
       // for(int j = 0; j < nums.length; j++) {
       // if ((nums[i] > nums[j]) && (i != j)) {
       // if (j >= nums.length - 1) {
       // result[i] = count + 1;
       // }
       // else {
       // count = count + 1;
       // }  
       // }else{
       // if (j >= nums.length - 1) {
       // result[i] = count;
       // }
       // }
       // }
       // }
       // return result;